[{"path":"https://leejtding.github.io/gsDesignCRT/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://leejtding.github.io/gsDesignCRT/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://leejtding.github.io/gsDesignCRT/articles/SpendingFunctionOverview.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Spending function overview","text":"Spending functions used set boundaries group sequential designs. Using spending function approach design offers natural way provide interim testing boundaries unplanned interim analyses added timing interim analysis changes. Many standard investigational spending functions provided gsDesign package. offer great deal flexibility setting stopping boundaries design. Spending functions three arguments return object type spendfn. summary() function spendfn objects provides brief textual summary spending function boundary used design. Normally spending function passed gsDesignCRT() parameter alpha_sf upper bound beta_sf lower bound specify spending function family design. case, user need know calling sequence — specify parameter(s) spending function. calling sequence useful user wishes plot spending function demonstrated examples. addition using supplied spending functions, user can write code spending function. See examples.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/articles/SpendingFunctionOverview.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Spending function overview","text":"See spendingFunction() input output specification spending functions. also contains two code examples showing use implemented spending function create new spending functions. detailed examples, see spending functions chapter gsDesign technical manual.","code":""},{"path":[]},{"path":"https://leejtding.github.io/gsDesignCRT/articles/example.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"gsDesignCRT example","text":"article outlines procedure calculating maximum expected sample sizes evaluating corresponding empirical power via simulation parallel group sequential CRT using gsDesignCRT package.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/articles/example.html","id":"calculating-maximum-and-expected-sample-sizes","dir":"Articles","previous_headings":"","what":"Calculating maximum and expected sample sizes","title":"gsDesignCRT example","text":"Suppose design group sequential CRT continuous outcomes K=3K = 3 interim analyses two-sided tests early efficacy binding futility stopping conducted. want calculate maximum number clusters per arm mmaxm_{max} needed detect effect size 0.20.2 0.050.05 Type error 0.90.9 power assuming variance outcomes arms 11, intracluster correlation coefficient (ICC) 0.10.1, average cluster size 5050 participants. calculating expected number participants per arm, assume recruitment conducted mmaxm_{max} clusters enrolled beginning trial individual participants recruited clusters time.","code":"library(gsDesignCRT)  ## Specify desired population parameters and error rates mu_vec <- c(0, 0.2) # Mean outcome for intervention arms sd_vec <- c(1, 1) # Standard deviations for intervention arms delta <- abs(mu_vec[2] - mu_vec[1]) # Desired effect size; must be > 0 n <- 50 # Average cluster size rho <- 0.1 # ICC  alpha <- 0.05 # Type I error beta <- 0.1 # Type II error (1 - power)  ## Specify how interim analyses are conducted k <- 3 # number of interim analyses test_type <- 4 # efficacy or binding futility stopping test_sides <- 2 # two-sided test size_type <- 1 # calculate maximum number of clusters per arm m_max recruit_type <- 2 # recruit individuals within clusters timing_type <- 2 # calculate maximum sample size based on information # increments in info_timing but calculate expected sample size based on sample # increments in size_timing alpha_sf <- sfLDOF # Efficacy bound spending function (O'Brien-Fleming here) beta_sf <- sfLDOF # Futility bound spending function (O'Brien-Fleming here)  ## Calculate corresponding sample size size_calc <- gsDesignCRT(k = k,                          outcome_type = 1, # continuous outcomes                          test_type = test_type,                          test_sides = test_sides,                          size_type = size_type,                          recruit_type = recruit_type,                          timing_type = timing_type,                          delta = delta,                          sigma_vec = sd_vec,                          rho = rho,                          alpha = alpha,                          beta = beta,                          n_fix = n,                          info_timing = 1,                          size_timing = 1,                          alpha_sf = alpha_sf,                          beta_sf = beta_sf)  # Maximum number of clusters per arm size_calc$max_m #> [1] 64.5923  # Maximum total number of participants size_calc$max_total #> [1] 6459.23  # Expected total number of participants under null and alternative hypotheses size_calc$e_total #> [1] 2586.719 2751.012"},{"path":"https://leejtding.github.io/gsDesignCRT/articles/example.html","id":"evaluating-empirical-power-via-simulations","dir":"Articles","previous_headings":"","what":"Evaluating empirical power via simulations","title":"gsDesignCRT example","text":"calculating maximum sample size, suppose want evaluate empirical power corresponding trial. assume interim analyses conducted Z-test variance ICC re-estimated analysis, participants recruited exactly according analyses originally scheduled, stopping boundaries re-computed using observed information analysis.","code":"set.seed(3)  ## Specify simulation parameters stat_type <- 2 # Z-test with re-estimated variance and ICC balance_size <- 1 # Exact sample increments according to the scheduled analyses precompute <- FALSE # Re-compute stopping boundaries using observed information # at each analysis  ## Conduct simulations reject <- c()  for (i in 1:1000) {   sim_df <- genContCRT(m = ceiling(size_calc$max_m), n = n,                        mu_vec = mu_vec, sigma_vec = sd_vec, rho = rho)   sim_trial <- gsSimContCRT(k, data = sim_df,                             test_type = test_type, test_sides = test_sides,                             recruit_type = recruit_type, stat_type = stat_type,                             balance_size = balance_size,                             precompute = precompute,                             delta = delta, rho = rho,                             alpha = alpha, beta = beta,                             m_max = ceiling(size_calc$max_m), n_max = n,                             alpha_sf = alpha_sf, beta_sf = beta_sf)   reject <- c(reject, sim_trial$reject) }  ## Estimate empirical power from simulations mean(reject) #> [1] 0.88"},{"path":"https://leejtding.github.io/gsDesignCRT/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lee Ding. Author, maintainer.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ding L (2025). gsDesignCRT: Group Sequential Design Cluster Randomized Trials. R package version 1.0.0, https://leejtding.github.io/gsDesignCRT/.","code":"@Manual{,   title = {gsDesignCRT: Group Sequential Design for Cluster Randomized Trials},   author = {Lee Ding},   year = {2025},   note = {R package version 1.0.0},   url = {https://leejtding.github.io/gsDesignCRT/}, }"},{"path":"https://leejtding.github.io/gsDesignCRT/index.html","id":"gsdesigncrt","dir":"","previous_headings":"","what":"Group Sequential Design for Cluster Randomized Trials","title":"Group Sequential Design for Cluster Randomized Trials","text":"gsDesignCRT package supports group sequential clinical trial design, largely presented book Group Sequential Methods Applications Clinical Trials Christopher Jennison Bruce Turnbull (Chapman Hall/CRC, 2000) implemented package gsDesign (Anderson, 2024).","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Group Sequential Design for Cluster Randomized Trials","text":"","code":"# To install the development version from GitHub: # install.packages(\"remotes\") remotes::install_github(\"leejtding/gsDesignCRT\")"},{"path":"https://leejtding.github.io/gsDesignCRT/reference/checkScalar.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility functions to verify variable properties — checkLengths","title":"Utility functions to verify variable properties — checkLengths","text":"Utility functions verify objects's properties including whether scalar vector, class, length, (numeric) whether range values specified interval. Additionally, checkLengths function can used ensure supplied inputs equal lengths. isInteger similar .integer except isInteger(1) returns TRUE whereas .integer(1) returns FALSE. checkScalar used verify input object scalar well properties specified . checkVector used verify input object atomic vector well properties defined . checkRange used check whether numeric input object's values reside specified interval.  values outside specified interval, FALSE returned. checkLength used check whether supplied inputs equal lengths.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/checkScalar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility functions to verify variable properties — checkLengths","text":"","code":"checkLengths(..., allowSingle = FALSE)  checkRange(   x,   interval = 0:1,   inclusion = c(TRUE, TRUE),   varname = deparse(substitute(x)),   tol = 0 )  checkScalar(x, isType = \"numeric\", ...)  checkVector(x, isType = \"numeric\", ..., length = NULL)  isInteger(x)"},{"path":"https://leejtding.github.io/gsDesignCRT/reference/checkScalar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility functions to verify variable properties — checkLengths","text":"... checkScalar checkVector functions, input represents additional arguments sent directly checkRange function. checkLengths function, input represents arguments check equal lengths. allowSingle logical flag. TRUE, arguments vectors comprised single element included comparative length test checkLengths function. Partial matching name argument performed must specify 'allowSingle' entirety call. x object. interval two-element numeric vector defining interval input object expected contained.  Use inclusion argument define boundary behavior. inclusion two-element logical vector defining boundary behavior specified interval. TRUE value denotes inclusion corresponding boundary. example, interval=c(3,6) inclusion=c(FALSE,TRUE), values input object verified interval (3,6]. varname character string defining name input variable sent function caller.  used primarily mechanism specify name variable tested checkRange called within function. tol numeric scalar defining tolerance use testing intervals checkRange function. isType character string defining class input object expected . length integer specifying expected length object case vector. length=NULL, default, length check performed.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/checkScalar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility functions to verify variable properties — checkLengths","text":"isInteger: Boolean value checking result functions return value, called side effects","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/checkScalar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility functions to verify variable properties — checkLengths","text":"","code":"# check whether input is an integer isInteger(1) #> [1] TRUE isInteger(1:5) #> [1] TRUE try(isInteger(\"abc\")) # expect error #> [1] FALSE  # check whether input is an integer scalar checkScalar(3, \"integer\")  # check whether input is an integer scalar that resides # on the interval on [3, 6]. Then test for interval (3, 6]. checkScalar(3, \"integer\", c(3, 6)) try(checkScalar(3, \"integer\", c(3, 6), c(FALSE, TRUE))) # expect error #> Error in checkRange(x, ..., varname = deparse(substitute(x))) :  #>   3 not on interval (3, 6]  # check whether the input is an atomic vector of class numeric, # of length 3, and whose value all reside on the interval [1, 10) x <- c(3, pi, exp(1)) checkVector(x, \"numeric\", c(1, 10), c(TRUE, FALSE), length = 3)  # do the same but change the expected length; expect error try(checkVector(x, \"numeric\", c(1, 10), c(TRUE, FALSE), length = 2)) #> Error in checkVector(x, \"numeric\", c(1, 10), c(TRUE, FALSE), length = 2) :  #>   object 'varstr' not found  # create faux function to check input variable foo <- function(moo) checkVector(moo, \"character\") foo(letters) try(foo(1:5)) # expect error with function and argument name in message #> Error in checkVector(moo, \"character\") :  #>   In function foo : variable moo  must be vector of class  character  # check for equal lengths of various inputs checkLengths(1:2, 2:3, 3:4) try(checkLengths(1, 2, 3, 4:5)) # expect error #> Error in checkLengths(1, 2, 3, 4:5) :  #>   In function doTryCatch :lengths of inputs are not all equal  # check for equal length inputs but ignore single element vectors checkLengths(1, 2, 3, 4:5, 7:8, allowSingle = TRUE)"},{"path":"https://leejtding.github.io/gsDesignCRT/reference/genBinCRT.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate cluster-randomized trial data with binary outcomes — genBinCRT","title":"Simulate cluster-randomized trial data with binary outcomes — genBinCRT","text":"Simulate cluster-randomized trial data binary outcomes","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/genBinCRT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate cluster-randomized trial data with binary outcomes — genBinCRT","text":"","code":"genBinCRT(m = 1, n = 1, p_vec = c(0.5, 0.5), rho = NULL)"},{"path":"https://leejtding.github.io/gsDesignCRT/reference/genBinCRT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate cluster-randomized trial data with binary outcomes — genBinCRT","text":"m Number clusters. n Mean size cluster. p_vec Probabilities event control treatment groups. rho Intraclass correlation coefficient. Default value 0.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/genBinCRT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate cluster-randomized trial data with binary outcomes — genBinCRT","text":"Simulated binary outcomes represented n x 4 matrix  columns encoding treatment arm, cluster, individual, response.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/genBinCRT.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate cluster-randomized trial data with binary outcomes — genBinCRT","text":"Lee Ding lee_ding@g.harvard.edu","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/genContCRT.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate cluster-randomized trial data with continuous outcomes — genContCRT","title":"Simulate cluster-randomized trial data with continuous outcomes — genContCRT","text":"Simulate cluster-randomized trial data continuous outcomes","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/genContCRT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate cluster-randomized trial data with continuous outcomes — genContCRT","text":"","code":"genContCRT(m = 1, n = 1, mu_vec = c(0, 1), sigma_vec = c(1, 1), rho = 0)"},{"path":"https://leejtding.github.io/gsDesignCRT/reference/genContCRT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate cluster-randomized trial data with continuous outcomes — genContCRT","text":"m Number clusters. n Mean size cluster. mu_vec Vector means control treatment groups, respectively. sigma_vec Vector standard deviations control treatment groups, respectively. rho Intraclass correlation coefficient. Default value 0.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/genContCRT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate cluster-randomized trial data with continuous outcomes — genContCRT","text":"Simulated continuous outcomes represented n x 4 matrix  columns encoding treatment arm, cluster, individual, response.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/genContCRT.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate cluster-randomized trial data with continuous outcomes — genContCRT","text":"Lee Ding lee_ding@g.harvard.edu","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsBoundsCRT.html","id":null,"dir":"Reference","previous_headings":"","what":"Boundary derivation for efficacy and binding or non-binding futility stopping. — gsBoundsCRT","title":"Boundary derivation for efficacy and binding or non-binding futility stopping. — gsBoundsCRT","text":"gsBoundsCRT used calculate stopping boundaries  group sequential trial 1 2-sided efficacy binding  non-binding futility stopping. Code adapted gsDesign package.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsBoundsCRT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boundary derivation for efficacy and binding or non-binding futility stopping. — gsBoundsCRT","text":"","code":"gsBoundsCRT(   theta = 0,   I,   falseneg,   falsepos,   sides = 1,   binding = TRUE,   tol = 1e-06,   r = 18,   printerr = 0 )"},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsBoundsCRT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boundary derivation for efficacy and binding or non-binding futility stopping. — gsBoundsCRT","text":"theta Effect size null hypothesis. Default value 0. Information levels interim analyses stopping boundaries calculated. given interim analysis include information levels current previous analyses. falseneg Type II error spent interim analyses information levels specified . falsepos Type error spent interim analyses information levels specified . sides 1= 1-sided test (default) 2= 2-sided test binding TRUE= binding (default) FALSE= non-binding tol Tolerance error (default 0.000001). Normally changed user.  translate directly number digits accuracy, use extra decimal places. r Integer value controlling grid numerical integration Jennison Turnbull (2000); default 18, range 1 80.  Larger values provide larger number grid points greater accuracy.  Normally r changed user. printerr Print output debugging.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsBoundsCRT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boundary derivation for efficacy and binding or non-binding futility stopping. — gsBoundsCRT","text":"Object containing following elements: k Number interim  analyses. theta input. input. Computed  lower futility boundaries specified interim analyses. b Computed upper efficacy boundaries specified interim  analyses. r input. error error flag returned; 0  convergence; 1 indicates error.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsBoundsCRT.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Boundary derivation for efficacy and binding or non-binding futility stopping. — gsBoundsCRT","text":"Jennison C Turnbull BW (2000), Group Sequential  Methods Applications Clinical Trials. Boca Raton: Chapman Hall.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsBoundsCRT.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Boundary derivation for efficacy and binding or non-binding futility stopping. — gsBoundsCRT","text":"Lee Ding lee_ding@g.harvard.edu","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsDesignCRT-package.html","id":null,"dir":"Reference","previous_headings":"","what":"gsDesignCRT: Group Sequential Design for Cluster Randomized Trials — gsDesignCRT-package","title":"gsDesignCRT: Group Sequential Design for Cluster Randomized Trials — gsDesignCRT-package","text":"Derives group sequential cluster randomized trial designs continuous binary outcomes. Based methods described Jennison, Christopher Turnbull, Bruce W., 2000, \"Group Sequential Methods Applications Clinical Trials\" implemented package gsDesign (Anderson, 2024).","code":""},{"path":[]},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsDesignCRT-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"gsDesignCRT: Group Sequential Design for Cluster Randomized Trials — gsDesignCRT-package","text":"Maintainer: Lee Ding lee_ding@g.harvard.edu","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsDesignCRT.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute stopping boundaries, maximum sample size, and expected sample sizes for a group sequential cluster randomized trial. — gsDesignCRT","title":"Compute stopping boundaries, maximum sample size, and expected sample sizes for a group sequential cluster randomized trial. — gsDesignCRT","text":"gsDesignCRT() used determine maximum sample  size needed specified parallel group sequential cluster randomized  trial detect clinically meaningful effect size Type error  rate power. Code adapted gsDesign package.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsDesignCRT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute stopping boundaries, maximum sample size, and expected sample sizes for a group sequential cluster randomized trial. — gsDesignCRT","text":"","code":"gsDesignCRT(   k = 3,   outcome_type = 1,   test_type = 1,   test_sides = 1,   size_type = 1,   recruit_type = 1,   timing_type = 2,   delta = 1,   sigma_vec = c(1, 1),   p_vec = c(0.5, 0.5),   rho = 0,   alpha = 0.05,   beta = 0.1,   m_fix = 1,   n_fix = 1,   info_timing = 1,   size_timing = 1,   alpha_sf = sfLDOF,   alpha_sfpar = -4,   beta_sf = sfLDOF,   beta_sfpar = -4,   tol = 1e-06,   r = 18 )"},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsDesignCRT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute stopping boundaries, maximum sample size, and expected sample sizes for a group sequential cluster randomized trial. — gsDesignCRT","text":"k Number analyses planned, including interim final. outcome_type 1=continuous difference means 2=binary difference proportions test_type 1= early stopping efficacy 2= early stopping binding futility 3= early stopping non-binding futility 4= early stopping either efficacy binding futility 5= early stopping either efficacy non-binding futility test_sides 1= one-sided test 2= two-sided test size_type 1=clusters per arm 2=cluster size recruit_type 1=recruit clusters fixed sizes 2=recruit individuals fixed number clusters 3=recruit clusters individuals timing_type 1= maximum expected sample sizes based specified information levels info_timing 2= maximum sample size based specified information levels info_timing expected sample sizes based specified sample size levels size_timing delta Effect size theta alternative hypothesis. Must > 0. sigma_vec Standard deviations control treatment groups (continuous case). p_vec Probabilities event control treatment groups (binary case). rho Intraclass correlation coefficient. Default value 0. alpha Type error, default value 0.05. beta Type II error, default value 0.1 (90% power). m_fix Number clusters; used find maximum size cluster. n_fix Mean size cluster; used find maximum number clusters per arm. info_timing Sets timing interim analyses based information levels. Default 1 produces analyses equal-spaced increments. Otherwise, vector length k k-1. values satisfy 0 < info_timing[1] < info_timing[2] < ... < info_timing[k-1] < info_timing[k]=1. size_timing Sets timing interim analyses based sample size levels timing_type = 2. Default 1 produces analyses equal-spaced increments. Otherwise, vector length k k-1. values satisfy 0 < size_timing[1] < size_timing[2] < ... < size_timing[k-1] < size_timing[k]=1. alpha_sf spending function character string indicating upper boundary type (, “WT” Wang-Tsiatis bounds, “” O'Brien-Fleming bounds, “Pocock” Pocock bounds). default value sfLDOF Lan-DeMets O'Brien-Fleming spending function. See details, vignette(\"SpendingFunctionOverview\"), manual examples. alpha_sfpar Real value, default \\(-4\\) O'Brien-Fleming-like conservative bound used Hwang-Shih-DeCani spending function. real-vector many spending functions. parameter alpha_sfpar specifies parameters needed spending function specified alpha_sf; ignored spending functions (sfLDOF, sfLDPocock) bound types (“”, “Pocock”) require parameters. beta_sf spending function character string indicating lower boundary type (, “WT” Wang-Tsiatis bounds, “” O'Brien-Fleming bounds, “Pocock” Pocock bounds). default value sfLDOF Lan-DeMets O'Brien-Fleming spending function. See details, vignette(\"SpendingFunctionOverview\"), manual examples. beta_sfpar Real value, default \\(-4\\) O'Brien-Fleming-like conservative bound used Hwang-Shih-DeCani spending function. real-vector many spending functions. parameter beta_sfpar specifies parameters needed spending function specified beta_sf; ignored spending functions (sfLDOF, sfLDPocock) bound types (“”, “Pocock”) require parameters. tol Tolerance error (default 0.000001). Normally changed user.  translate directly number digits accuracy, use extra decimal places. r Integer value controlling grid numerical integration Jennison Turnbull (2000); default 18, range 1 80.  Larger values provide larger number grid points greater accuracy.  Normally r changed user.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsDesignCRT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute stopping boundaries, maximum sample size, and expected sample sizes for a group sequential cluster randomized trial. — gsDesignCRT","text":"Object containing following elements: k  input. outcome_type input. test_type input. test_sides input. size_type input. recruit_type input. timing_type input. delta  input. sigma_vec input. p_vec input. rho  input. alpha input. beta input. info_timing  input. size_timing input. Fisher information  planned interim analysis based timing_type. max_i Maximum  information corresponding design specifications. m Number  clusters per arm planned interim analysis. max_m Maximum  number clusters per arm. e_m vector length 2 expected  number clusters per arm null alternative hypotheses.  simplicity, expected sizes non-binding futility boundaries  calculated assuming boundaries binding futility. n Average  cluster size planned interim analysis. max_n Maximum cluster  size. e_m vector length 2 expected cluster sizes  null alternative hypotheses. simplicity, expected sizes  non-binding futility boundaries calculated assuming futility  boundaries binding. max_total Maximum number individuals  trial. e_total vector length 2 expected number  individuals trial null alternative hypotheses.  simplicity, expected sizes non-binding futility boundaries  calculated assuming futility boundaries binding. sufficient Value denoting whether calculated sample size sufficient achieve  specified Type error rate power given trial specifications. lower_bound Calculated lower futility boundaries analysis  schedule specified timing_type upper_bound Calculated  upper efficacy boundaries analysis schedule specified  timing_types. tol input. r input.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsDesignCRT.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute stopping boundaries, maximum sample size, and expected sample sizes for a group sequential cluster randomized trial. — gsDesignCRT","text":"Jennison C Turnbull BW (2000), Group Sequential  Methods Applications Clinical Trials. Boca Raton: Chapman Hall.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsDesignCRT.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute stopping boundaries, maximum sample size, and expected sample sizes for a group sequential cluster randomized trial. — gsDesignCRT","text":"Lee Ding lee_ding@g.harvard.edu","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsLowerCRT.html","id":null,"dir":"Reference","previous_headings":"","what":"Boundary derivation for binding or non-binding futility stopping only. — gsLowerCRT","title":"Boundary derivation for binding or non-binding futility stopping only. — gsLowerCRT","text":"gsLowerCRT used calculate stopping boundaries  group sequential trial 1 2-sided futility-stopping. Code  adapted gsDesign package.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsLowerCRT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boundary derivation for binding or non-binding futility stopping only. — gsLowerCRT","text":"","code":"gsLowerCRT(   theta = 0,   I,   falseneg,   b = NULL,   sides = 1,   binding = TRUE,   tol = 1e-06,   r = 18,   printerr = 0 )"},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsLowerCRT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boundary derivation for binding or non-binding futility stopping only. — gsLowerCRT","text":"theta Effect size null hypothesis. Default value 0. Information levels interim analyses stopping boundaries calculated. given interim analysis include information levels current previous analyses. falseneg Type II error spent interim analyses information levels specified . b Upper efficacy boundary values interim analyses information levels specified . sides 1= 1-sided test (default) 2= 2-sided test binding TRUE= binding (default) FALSE= non-binding tol Tolerance error (default 0.000001). Normally changed user.  translate directly number digits accuracy, use extra decimal places. r Integer value controlling grid numerical integration Jennison Turnbull (2000); default 18, range 1 80.  Larger values provide larger number grid points greater accuracy.  Normally r changed user. printerr Print output debugging.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsLowerCRT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boundary derivation for binding or non-binding futility stopping only. — gsLowerCRT","text":"Object containing following elements: k Number interim  analyses. theta input. input. Computed  lower futility boundaries specified interim analyses. b  input. r input. error error flag returned; 0  convergence; 1 indicates error.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsLowerCRT.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Boundary derivation for binding or non-binding futility stopping only. — gsLowerCRT","text":"Jennison C Turnbull BW (2000), Group Sequential  Methods Applications Clinical Trials. Boca Raton: Chapman Hall.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsLowerCRT.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Boundary derivation for binding or non-binding futility stopping only. — gsLowerCRT","text":"Lee Ding lee_ding@g.harvard.edu","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsProbabilityCRT.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute stopping boundary crossing probabilities. — gsProbabilityCRT","title":"Compute stopping boundary crossing probabilities. — gsProbabilityCRT","text":"Compute stopping boundary crossing probabilities.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsProbabilityCRT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute stopping boundary crossing probabilities. — gsProbabilityCRT","text":"","code":"gsProbabilityCRT(theta = 0, I = 1, a = 0, b = 1, sides = 1, r = 18)"},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsProbabilityCRT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute stopping boundary crossing probabilities. — gsProbabilityCRT","text":"theta Effect size. Default value 0. Information levels interim analyses boundary crossing probabilities computed. Lower futility boundaries interim analyses information levels specified . b Upper efficacy boundaries interim analyses information levels specified . sides 1= 1-sided test (default) 2= 2-sided test. r Integer value controlling grid numerical integration Jennison Turnbull (2000); default 18, range 1 80.  Larger values provide larger number grid points greater accuracy.  Normally r changed user.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsProbabilityCRT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute stopping boundary crossing probabilities. — gsProbabilityCRT","text":"Object containing following elements: k Number interim  analyses. theta input. input. lower List  containing lower futility boundaries (bound)  corresponding probabilities crossing lower boundaries given  theta (prob). upper List containing upper efficacy  boundaries (bound) corresponding probabilities crossing  upper boundaries given theta (prob). power Estimated  power trial. futile Estimated probability futility trial r input.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsProbabilityCRT.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute stopping boundary crossing probabilities. — gsProbabilityCRT","text":"Jennison C Turnbull BW (2000), Group Sequential  Methods Applications Clinical Trials. Boca Raton: Chapman Hall.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsProbabilityCRT.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute stopping boundary crossing probabilities. — gsProbabilityCRT","text":"Lee Ding lee_ding@g.harvard.edu","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsSimBinCRT.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate group sequential cluster-randomized trial with binary outcomes — gsSimBinCRT","title":"Simulate group sequential cluster-randomized trial with binary outcomes — gsSimBinCRT","text":"Simulate group sequential cluster-randomized trial binary outcomes","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsSimBinCRT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate group sequential cluster-randomized trial with binary outcomes — gsSimBinCRT","text":"","code":"gsSimBinCRT(   k,   data,   test_type,   test_sides,   recruit_type,   stat_type,   balance_size,   precompute = FALSE,   delta,   p_vec,   rho,   alpha = 0.05,   beta = 0.1,   lower_bound = NULL,   upper_bound = NULL,   m_max = 1,   n_max = 1,   schedule_m = NULL,   schedule_n = NULL,   alpha_sf,   alpha_sfpar = -4,   beta_sf,   beta_sfpar = -4,   tol = 1e-06,   r = 18 )"},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsSimBinCRT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate group sequential cluster-randomized trial with binary outcomes — gsSimBinCRT","text":"k Number analyses planned, including interim final. data Simulated binary outcomes. n x 4 matrix columns encoding treatment arm, cluster, individual, response. test_type 1= early stopping efficacy 2= early stopping binding futility 3= early stopping non-binding futility 4= early stopping either efficacy binding futility 5= early stopping either efficacy non-binding futility test_sides 1= one-sided test 2= two-sided test recruit_type 1=clusters individuals recruited 2=individuals recruited cluster 3=clusters individuals clusters stat_type 1= Z-test known variance ICC 2= Z-test re-estimated variance ICC 3= t-test re-estimated variance ICC balance_size 1= exact sample increments according scheduled interim analyses. 2= randomized sample increments multinomial distribution according scheduled interim analyses. precompute Use pre-computed stopping boundaries true. delta Effect size theta alternative hypothesis. p_vec Probabilities event control treatment groups. rho Intraclass correlation coefficient. Default value 0. alpha Type error, always one-sided. Default value 0.05. beta Type II error, default value 0.1 (90% power). lower_bound Pre-computed lower futility boundaries specified interim analyses. Must specified precompute TRUE. NULL otherwise. upper_bound Pre-computed upper efficacy boundaries specified interim analyses. Must specified precompute TRUE. NULL otherwise. m_max Number clusters. n_max Mean size cluster. schedule_m Number clusters interim look. Interim analyses conducted according information levels schedule_m schedule_n provided. Otherwise, interim analyses conducted equal-sized sample increments according recruit_type. schedule_n Average cluster size interim look. Interim analyses conducted according information levels schedule_m schedule_n provided. Otherwise, interim analyses conducted equal-sized sample increments according recruit_type. alpha_sf spending function character string indicating upper boundary type (, “WT” Wang-Tsiatis bounds, “” O'Brien-Fleming bounds, “Pocock” Pocock bounds). default value sfLDOF Lan-DeMets O'Brien-Fleming spending function. See details, vignette(\"SpendingFunctionOverview\"), manual examples. alpha_sfpar Real value, default \\(-4\\) O'Brien-Fleming-like conservative bound used Hwang-Shih-DeCani spending function. real-vector many spending functions. parameter alpha_sfpar specifies parameters needed spending function specified alpha_sf; ignored spending functions (sfLDOF, sfLDPocock) bound types (“”, “Pocock”) require parameters. beta_sf spending function character string indicating lower boundary type (, “WT” Wang-Tsiatis bounds, “” O'Brien-Fleming bounds, “Pocock” Pocock bounds). default value sfLDOF Lan-DeMets O'Brien-Fleming spending function. See details, vignette(\"SpendingFunctionOverview\"), manual examples. beta_sfpar Real value, default \\(-4\\) O'Brien-Fleming-like conservative bound used Hwang-Shih-DeCani spending function. real-vector many spending functions. parameter beta_sfpar specifies parameters needed spending function specified beta_sf; ignored spending functions (sfLDOF, sfLDPocock) bound types (“”, “Pocock”) require parameters. tol Tolerance error (default 0.000001). Normally changed user.  translate directly number digits accuracy, use extra decimal places. r Integer value controlling grid numerical integration Jennison Turnbull (2000); default 18, range 1 80.  Larger values provide larger number grid points greater accuracy.  Normally r changed user.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsSimBinCRT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate group sequential cluster-randomized trial with binary outcomes — gsSimBinCRT","text":"Object containing following elements: reject Whether null hypothesis rejected simulated trial. k_i Interim analysis simulated trial stopped. m_i Number clusters per arm simulated trial stopped. n_i Average number individuals per cluster simulated trial stopped. total_i Total number individuals per arm simulated trial stopped. i_frac Information fraction simulated trial stopped.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsSimContCRT.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate group sequential cluster-randomized trial with continuous outcomes. — gsSimContCRT","title":"Simulate group sequential cluster-randomized trial with continuous outcomes. — gsSimContCRT","text":"Simulate group sequential cluster-randomized trial continuous outcomes.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsSimContCRT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate group sequential cluster-randomized trial with continuous outcomes. — gsSimContCRT","text":"","code":"gsSimContCRT(   k,   data,   test_type,   test_sides,   recruit_type,   stat_type,   balance_size,   precompute = FALSE,   delta,   sigma_vec = c(1, 1),   rho,   alpha = 0.05,   beta = 0.1,   lower_bound = NULL,   upper_bound = NULL,   m_max = 1,   n_max = 1,   schedule_m = NULL,   schedule_n = NULL,   alpha_sf,   alpha_sfpar = -4,   beta_sf,   beta_sfpar = -4,   tol = 1e-06,   r = 18 )"},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsSimContCRT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate group sequential cluster-randomized trial with continuous outcomes. — gsSimContCRT","text":"k Number analyses planned, including interim final. data Simulated continuous outcomes. n x 4 matrix columns encoding treatment arm, cluster, individual, response. test_type 1= early stopping efficacy 2= early stopping binding futility 3= early stopping non-binding futility 4= early stopping either efficacy binding futility 5= early stopping either efficacy non-binding futility test_sides 1= one-sided test 2= two-sided test recruit_type 1=clusters individuals recruited 2=individuals recruited cluster 3=clusters individuals clusters stat_type 1= Z-test known variance ICC 2= Z-test re-estimated variance ICC 3= t-test re-estimated variance ICC balance_size 1= exact sample increments according scheduled interim analyses. 2= randomized sample increments multinomial distribution according scheduled interim analyses. precompute Use pre-computed stopping boundaries true. delta Effect size theta alternative hypothesis. sigma_vec Standard deviations control treatment groups. rho Intraclass correlation coefficient. Default value 0. alpha Desired Type error, always one-sided. Default value 0.05. beta Desired Type II error, default value 0.1 (90% power). lower_bound Pre-computed lower futility boundaries specified interim analyses. Must specified precompute TRUE. NULL otherwise. upper_bound Pre-computed upper efficacy boundaries specified interim analyses. Must specified precompute TRUE. NULL otherwise. m_max Number clusters. n_max Mean size cluster. schedule_m Number clusters interim look. Interim analyses conducted according information levels schedule_m schedule_n provided. Otherwise, interim analyses conducted equal-sized sample increments according recruit_type. schedule_n Average cluster size interim look. Interim analyses conducted according information levels schedule_m schedule_n provided. Otherwise, interim analyses conducted equal-sized sample increments according recruit_type. alpha_sf spending function character string indicating upper boundary type (, “WT” Wang-Tsiatis bounds, “” O'Brien-Fleming bounds, “Pocock” Pocock bounds). default value sfLDOF Lan-DeMets O'Brien-Fleming spending function. See details, vignette(\"SpendingFunctionOverview\"), manual examples. alpha_sfpar Real value, default \\(-4\\) O'Brien-Fleming-like conservative bound used Hwang-Shih-DeCani spending function. real-vector many spending functions. parameter alpha_sfpar specifies parameters needed spending function specified alpha_sf; ignored spending functions (sfLDOF, sfLDPocock) bound types (“”, “Pocock”) require parameters. beta_sf spending function character string indicating lower boundary type (, “WT” Wang-Tsiatis bounds, “” O'Brien-Fleming bounds, “Pocock” Pocock bounds). default value sfLDOF Lan-DeMets O'Brien-Fleming spending function. See details, vignette(\"SpendingFunctionOverview\"), manual examples. beta_sfpar Real value, default \\(-4\\) O'Brien-Fleming-like conservative bound used Hwang-Shih-DeCani spending function. real-vector many spending functions. parameter beta_sfpar specifies parameters needed spending function specified beta_sf; ignored spending functions (sfLDOF, sfLDPocock) bound types (“”, “Pocock”) require parameters. tol Tolerance error (default 0.000001). Normally changed user.  translate directly number digits accuracy, use extra decimal places. r Integer value controlling grid numerical integration Jennison Turnbull (2000); default 18, range 1 80.  Larger values provide larger number grid points greater accuracy.  Normally r changed user.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsSimContCRT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate group sequential cluster-randomized trial with continuous outcomes. — gsSimContCRT","text":"Object containing following elements: reject Whether null hypothesis rejected simulated trial. k_i Interim analysis simulated trial stopped. m_i Number clusters per arm simulated trial stopped. n_i Average number individuals per cluster simulated trial stopped. total_i Total number individuals per arm simulated trial stopped. i_frac Information fraction simulated trial stopped.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsSimContCRT.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate group sequential cluster-randomized trial with continuous outcomes. — gsSimContCRT","text":"Lee Ding lee_ding@g.harvard.edu","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsUpperCRT.html","id":null,"dir":"Reference","previous_headings":"","what":"Boundary derivation for efficacy stopping only. — gsUpperCRT","title":"Boundary derivation for efficacy stopping only. — gsUpperCRT","text":"gsUpperCRT used calculate stopping boundaries group sequential trial 1 2-sided efficacy-stopping. Code adapted gsDesign package.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsUpperCRT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boundary derivation for efficacy stopping only. — gsUpperCRT","text":"","code":"gsUpperCRT(   theta = 0,   I,   a = NULL,   falsepos,   sides = 1,   tol = 1e-06,   r = 18,   printerr = 0 )"},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsUpperCRT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boundary derivation for efficacy stopping only. — gsUpperCRT","text":"theta Effect size null hypothesis. Default value 0. Information levels interim analyses stopping boundaries calculated. given interim analysis include information levels current previous analyses. Lower futility boundary values interim analyses information levels specified . falsepos Type error spent interim analyses information levels specified . sides 1= 1-sided test (default) 2= 2-sided test tol Tolerance error (default 0.000001). Normally changed user.  translate directly number digits accuracy, use extra decimal places. r Integer value controlling grid numerical integration Jennison Turnbull (2000); default 18, range 1 80.  Larger values provide larger number grid points greater accuracy.  Normally r changed user. printerr Print output debugging.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsUpperCRT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boundary derivation for efficacy stopping only. — gsUpperCRT","text":"Object containing following elements: k Number interim  analyses. theta input. input. input. b Computed upper efficacy boundaries specified interim  analyses. r input. error Error flag returned; 0  convergence; 1 indicates error.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsUpperCRT.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Boundary derivation for efficacy stopping only. — gsUpperCRT","text":"Jennison C Turnbull BW (2000), Group Sequential Methods Applications Clinical Trials. Boca Raton: Chapman Hall.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/gsUpperCRT.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Boundary derivation for efficacy stopping only. — gsUpperCRT","text":"Lee Ding lee_ding@g.harvard.edu","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://leejtding.github.io/gsDesignCRT/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfDistribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Two-parameter Spending Function Families — sfLogistic","title":"Two-parameter Spending Function Families — sfLogistic","text":"functions sfLogistic(), sfNormal(), sfExtremeValue(), sfExtremeValue2(), sfCauchy(), sfBetaDist() 2-parameter spending function families. provide increased flexibility situations flexibility one-parameter spending function family sufficient. functions allow fitting two points cumulative spending function curve; case, four parameters specified indicating x y coordinate 2 points. sfBetaDist(alpha,t,param) simply alpha times incomplete beta cumulative distribution function parameters \\(\\) \\(b\\) passed param evaluated values passed t. spending functions take form $$f(t;\\alpha,,b)=\\alpha F(+bF^{-1}(t))$$ \\(F()\\) cumulative distribution function values \\(> 0\\) real line (logistic sfLogistic(), normal sfNormal(), extreme value sfExtremeValue() Cauchy sfCauchy()) \\(F^{-1}()\\) inverse. logistic spending function simplifies $$f(t;\\alpha,,b)=\\alpha (1-(1+e^(t/(1-t))^b)^{-1}).$$ extreme value distribution $$F(x)=\\exp(-\\exp(-x))$$ simplifies $$f(t;\\alpha,,b)=\\alpha \\exp(-e^(-\\ln t)^b).$$ Since extreme value distribution symmetric, also version standard distribution flipped 0. reflected sfExtremeValue2() $$F(x)=1-\\exp(-\\exp(x)).$$","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfDistribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Two-parameter Spending Function Families — sfLogistic","text":"","code":"sfLogistic(alpha, t, param)  sfBetaDist(alpha, t, param)  sfCauchy(alpha, t, param)  sfExtremeValue(alpha, t, param)  sfExtremeValue2(alpha, t, param)  sfNormal(alpha, t, param)"},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfDistribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Two-parameter Spending Function Families — sfLogistic","text":"alpha Real value \\(> 0\\) 1. Normally, alpha=0.025 one-sided Type error specification alpha=0.1 Type II error specification. However, set 1 descriptive purposes wish see proportion spending function proportion sample size information. t vector points increasing values 0 1, inclusive. Values proportion sample size information spending function computed. param two-parameter specification, sfBetaDist() requires 2 positive values, sfLogistic(), sfNormal(), sfExtremeValue(), sfExtremeValue2() sfCauchy() require first parameter real value second positive value.  four parameter specification c(t1,t2,u1,u2) objective sf(t1)=alpha*u1 sf(t2)=alpha*u2.  parameterization, four values must 0 1 t1 < t2, u1 < u2.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfDistribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Two-parameter Spending Function Families — sfLogistic","text":"object type spendfn. See vignette(\"SpendingFunctionOverview\") details.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfDistribution.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Two-parameter Spending Function Families — sfLogistic","text":"gsDesign technical manual available   https://keaven.github.io/gsd-tech-manual/.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfDistribution.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Two-parameter Spending Function Families — sfLogistic","text":"Jennison C Turnbull BW (2000), Group Sequential Methods Applications Clinical Trials. Boca Raton: Chapman Hall.","code":""},{"path":[]},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfDistribution.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Two-parameter Spending Function Families — sfLogistic","text":"Keaven Anderson keaven_anderson@merck.com","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfExponential.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential Spending Function — sfExponential","title":"Exponential Spending Function — sfExponential","text":"function sfExponential implements exponential spending function (Anderson Clark, 2009). exponential spending function defined positive nu \\(0\\le t\\le 1\\) $$f(t;\\alpha,\\nu)=\\alpha(t)=\\alpha^{t^{-\\nu}}.$$ value nu=0.8 approximates O'Brien-Fleming spending function well. general class spending functions family derived requires continuously increasing cumulative distribution function defined \\(x>0\\) defined $$f(t;\\alpha, \\nu)=1-F\\left(F^{-1}(1-\\alpha)/ t^\\nu\\right).$$ exponential spending function can derived letting \\(F(x)=1-\\exp(-x)\\), exponential cumulative distribution function. function derived generalization Lan-DeMets (1983) spending function used approximate O'Brien-Fleming spending function (sfLDOF()), $$f(t; \\alpha)=2-2\\Phi \\left( \\Phi^{-1}(1-\\alpha/2)/ t^{1/2} \\right).$$","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfExponential.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exponential Spending Function — sfExponential","text":"","code":"sfExponential(alpha, t, param)"},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfExponential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential Spending Function — sfExponential","text":"alpha Real value \\(> 0\\) 1. Normally, alpha=0.025 one-sided Type error specification alpha=0.1 Type II error specification. However, set 1 descriptive purposes wish see proportion spending function proportion sample size/information. t vector points increasing values 0 1, inclusive. Values proportion sample size/information spending function computed. param single positive value specifying nu parameter exponential spending computed; allowable range (0, 1.5].","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfExponential.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponential Spending Function — sfExponential","text":"object type spendfn. See vignette(\"SpendingFunctionOverview\") details.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfExponential.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Exponential Spending Function — sfExponential","text":"gsDesign technical manual shows use sfExponential()   closely approximate O'Brien-Fleming design.   manual available <https://keaven.github.io/gsd-tech-manual/>.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfExponential.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Exponential Spending Function — sfExponential","text":"Anderson KM Clark JB (2009), Fitting spending functions. Statistics Medicine; 29:321-327. Jennison C Turnbull BW (2000), Group Sequential Methods Applications Clinical Trials. Boca Raton: Chapman Hall. Lan, KKG DeMets, DL (1983), Discrete sequential boundaries clinical trials. Biometrika; 70:659-663.","code":""},{"path":[]},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfExponential.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Exponential Spending Function — sfExponential","text":"Keaven Anderson keaven_anderson@merck.com","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfHSD.html","id":null,"dir":"Reference","previous_headings":"","what":"Hwang-Shih-DeCani Spending Function — sfHSD","title":"Hwang-Shih-DeCani Spending Function — sfHSD","text":"function sfHSD implements Hwang-Shih-DeCani spending function. Hwang-Shih-DeCani spending function takes form $$f(t;\\alpha, \\gamma)=\\alpha(1-e^{-\\gamma t})/(1-e^{-\\gamma})$$ \\(\\gamma\\) value passed param. value \\(\\gamma=-4\\) used approximate O'Brien-Fleming design (see sfExponential better fit), value \\(\\gamma=1\\) approximates Pocock design well.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfHSD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hwang-Shih-DeCani Spending Function — sfHSD","text":"","code":"sfHSD(alpha, t, param)"},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfHSD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hwang-Shih-DeCani Spending Function — sfHSD","text":"alpha Real value \\(> 0\\) 1. Normally, alpha=0.025 one-sided Type error specification alpha=0.1 Type II error specification. However, set 1 descriptive purposes wish see proportion spending function proportion sample size/information. t vector points increasing values 0 1, inclusive. Values proportion sample size/information spending function computed. param single real value specifying gamma parameter Hwang-Shih-DeCani spending computed; allowable range [-40, 40]","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfHSD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hwang-Shih-DeCani Spending Function — sfHSD","text":"object type spendfn. See vignette(\"SpendingFunctionOverview\") details.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfHSD.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Hwang-Shih-DeCani Spending Function — sfHSD","text":"gsDesign technical manual available   https://keaven.github.io/gsd-tech-manual/.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfHSD.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Hwang-Shih-DeCani Spending Function — sfHSD","text":"Jennison C Turnbull BW (2000), Group Sequential Methods Applications Clinical Trials. Boca Raton: Chapman Hall.","code":""},{"path":[]},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfHSD.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Hwang-Shih-DeCani Spending Function — sfHSD","text":"Keaven Anderson keaven_anderson@merck.com","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfLDOF.html","id":null,"dir":"Reference","previous_headings":"","what":"Lan-DeMets Spending function overview — sfLDOF","title":"Lan-DeMets Spending function overview — sfLDOF","text":"Lan DeMets (1983) first published method using spending functions set boundaries group sequential trials. publication proposed two specific spending functions: one approximate O'Brien-Fleming design approximate Pocock design. spending function approximate O'Brien-Fleming generalized proposed Liu, et al (2012) param=1=rho, Lan-DeMets (1983) spending function approximate O'Brien-Fleming bound implemented function (sfLDOF()): $$f(t; \\alpha)=2-2\\Phi\\left(\\Phi^{-1}(1-\\alpha/2)/ t^{\\rho/2}\\right).$$ rho otherwise [.005,2], generalized version Liu et al (2012). param outside [.005,2], rho set 1. Lan-DeMets (1983) spending function approximate Pocock design implemented function sfLDPocock(): $$f(t;\\alpha)=\\alpha ln(1+(e-1)t).$$ shown examples , spending functions can used ge t good better approximations Pocock O'Brien-Fleming bounds. particular, O'Brien-Fleming bounds can closely approximated using sfExponential.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfLDOF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lan-DeMets Spending function overview — sfLDOF","text":"","code":"sfLDOF(alpha, t, param = NULL)  sfLDPocock(alpha, t, param)"},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfLDOF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lan-DeMets Spending function overview — sfLDOF","text":"alpha Real value \\(> 0\\) 1. Normally, alpha=0.025 one-sided Type error specification alpha=0.1 Type II error specification. However, set 1 descriptive purposes wish see proportion spending function proportion sample size/information. t vector points increasing values 0 1, inclusive. Values proportion sample size/information spending function computed. param parameter used sfLDPocock, required sfLDOF need specified. sfLDPocock calling sequence conforms standard spending functions used gsDesignCRT(). sfLDOF default 1 (Lan-DeMets function approximate O'Brien-Fleming) NULL outside range [.005,2]. otherwise, use set rho Liu et al (2012).","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfLDOF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lan-DeMets Spending function overview — sfLDOF","text":"object type spendfn. See vignette(\"SpendingFunctionOverview\") details.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfLDOF.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Lan-DeMets Spending function overview — sfLDOF","text":"gsDesign technical manual available   https://keaven.github.io/gsd-tech-manual/.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfLDOF.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Lan-DeMets Spending function overview — sfLDOF","text":"Jennison C Turnbull BW (2000), Group Sequential Methods Applications Clinical Trials. Boca Raton: Chapman Hall. Lan, KKG DeMets, DL (1983), Discrete sequential boundaries clinical trials. Biometrika;70: 659-663. Liu, Q, Lim, P, Nuamah, , Li, Y (2012), adaptive error spending approach group sequential trials random information levels. Journal biopharmaceutical statistics; 22(4), 687-699.","code":""},{"path":[]},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfLDOF.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Lan-DeMets Spending function overview — sfLDOF","text":"Keaven Anderson keaven_anderson@merck.com","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfLinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Piecewise Linear and Step Function Spending Functions — sfLinear","title":"Piecewise Linear and Step Function Spending Functions — sfLinear","text":"function sfLinear() allows specification piecewise linear spending function. function sfStep() specifies step function spending function. functions provide complete flexibility setting spending desired timepoints group sequential design. Normally function passed gsDesignCRT() parameter sfu upper bound sfl lower bound specify spending function family design. passed gsDesignCRT(), value param passed sfLinear() sfStep() gsDesignCRT() arguments sfupar upper bound sflpar lower bound. Note sfStep() allows setting particular level spending timing strictly known; example shows can inflate Type error timing analyses changed based knowing treatment effect interim.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfLinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Piecewise Linear and Step Function Spending Functions — sfLinear","text":"","code":"sfLinear(alpha, t, param)  sfStep(alpha, t, param)"},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfLinear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Piecewise Linear and Step Function Spending Functions — sfLinear","text":"alpha Real value \\(> 0\\) 1. Normally, alpha=0.025 one-sided Type error specification alpha=0.1 Type II error specification. However, set 1 descriptive purposes wish see proportion spending function proportion sample size information. t vector points increasing values 0 1, inclusive. Values proportion sample size information spending function computed. param vector positive, even length. Values must range 0 1, inclusive. Letting m <- length(param/2), first m points param specify increasing values strictly 0 1 corresponding interim timing (proportion final total statistical information). last m points param specify non-decreasing values 0 1, inclusive, cumulative proportion spending specified timepoints.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfLinear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Piecewise Linear and Step Function Spending Functions — sfLinear","text":"object type spendfn.  cumulative spending returned sfLinear$spend 0 t <= 0 alpha t>=1.  t specified points, linear interpolation used determine sfLinear$spend. cumulative spending returned sfStep$spend 0 t<param[1] alpha t>=1.  Letting m <- length(param/2), =1,2,...m-1  param[]<= t < param[+1], cumulative spending set alpha * param[+m] (also param[m]<=t<1). Note param[2m] 1, first time analysis performed last proportion final planned information (param[m]) final analysis, using remaining error previously spent. See vignette(\"SpendingFunctionOverview\") details.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfLinear.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Piecewise Linear and Step Function Spending Functions — sfLinear","text":"gsDesign technical manual available   https://keaven.github.io/gsd-tech-manual/.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfLinear.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Piecewise Linear and Step Function Spending Functions — sfLinear","text":"Jennison C Turnbull BW (2000), Group Sequential Methods Applications Clinical Trials. Boca Raton: Chapman Hall.","code":""},{"path":[]},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfLinear.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Piecewise Linear and Step Function Spending Functions — sfLinear","text":"Keaven Anderson keaven_anderson@merck.com","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfPoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Pointwise Spending Function — sfPoints","title":"Pointwise Spending Function — sfPoints","text":"function sfPoints implements spending function values specified arbitrary set specified points. now recommended use sfLinear rather sfPoints. using sfPoints() design, recommended specify interpolate specified points (e.g,, linear interpolation); also consider fitting smooth spending functions; see vignette(\"SpendingFunctionOverview\").","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfPoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pointwise Spending Function — sfPoints","text":"","code":"sfPoints(alpha, t, param)"},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfPoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pointwise Spending Function — sfPoints","text":"alpha Real value \\(> 0\\) 1. Normally, alpha=0.025 one-sided Type error specification alpha=0.1 Type II error specification. However, set 1 descriptive purposes wish see proportion spending function proportion sample size/information. t vector points increasing values >0 <=1.  Values proportion sample size/information spending function computed. param vector length t specifying cumulative proportion spending corresponding point t; must >=0 <=1.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfPoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pointwise Spending Function — sfPoints","text":"object type spendfn. See vignette(\"SpendingFunctionOverview\") details.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfPoints.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Pointwise Spending Function — sfPoints","text":"gsDesign technical manual available   https://keaven.github.io/gsd-tech-manual/.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfPoints.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Pointwise Spending Function — sfPoints","text":"Jennison C Turnbull BW (2000), Group Sequential Methods Applications Clinical Trials. Boca Raton: Chapman Hall.","code":""},{"path":[]},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfPoints.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Pointwise Spending Function — sfPoints","text":"Keaven Anderson keaven_anderson@merck.com","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfPower.html","id":null,"dir":"Reference","previous_headings":"","what":"Kim-DeMets (power) Spending Function — sfPower","title":"Kim-DeMets (power) Spending Function — sfPower","text":"function sfPower() implements Kim-DeMets (power) spending function. flexible, one-parameter spending function recommended Jennison Turnbull (2000). Kim-DeMets spending function takes form $$f(t;\\alpha,\\rho)=\\alpha t^\\rho$$ \\(\\rho\\) value passed param. See examples range values \\(\\rho\\) may interest (param=0.75 3 documented ).","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfPower.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kim-DeMets (power) Spending Function — sfPower","text":"","code":"sfPower(alpha, t, param)"},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfPower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kim-DeMets (power) Spending Function — sfPower","text":"alpha Real value \\(> 0\\) 1. Normally, alpha=0.025 one-sided Type error specification alpha=0.1 Type II error specification. However, set 1 descriptive purposes wish see proportion spending function proportion sample size/information. t vector points increasing values 0 1, inclusive. Values proportion sample size/information spending function computed. param single, positive value specifying \\(\\rho\\) parameter Kim-DeMets spending computed; allowable range (0,50]","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfPower.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kim-DeMets (power) Spending Function — sfPower","text":"object type spendfn. See vignette(\"SpendingFunctionOverview\") details.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfPower.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Kim-DeMets (power) Spending Function — sfPower","text":"gsDesign technical manual available   https://keaven.github.io/gsd-tech-manual/.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfPower.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Kim-DeMets (power) Spending Function — sfPower","text":"Jennison C Turnbull BW (2000), Group Sequential Methods Applications Clinical Trials. Boca Raton: Chapman Hall.","code":""},{"path":[]},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfPower.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Kim-DeMets (power) Spending Function — sfPower","text":"Keaven Anderson keaven_anderson@merck.com","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfSpecial.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncated, trimmed and gapped spending functions — sfTruncated","title":"Truncated, trimmed and gapped spending functions — sfTruncated","text":"functions sfTruncated() sfTrimmed apply spending function restricted range. allows eliminating spending early interim analyses desire stop bound specified; usually applied eliminate early tests positive efficacy finding. truncation can come late trial desire stop trial time , say, 90 percent information available analysis performed. allows full Type error spending final analysis occurs early. functions set cumulative spending 0 'spending interval' interval [0,1], set cumulative spending 1 range. sfTrimmed() otherwise change input spending function specified; probably preferred intuitive method cases. sfTruncated() resets time scale input spending function computed 'spending interval.' sfGapped() allows elimination analyses time point trial; see details examples. sfTrimmed simply computes value input spending function parameters sub-range [0,1], sets spending 0 range sets spending 1 range. sfGapped spends outside range provided trange. trange, input spending function used. trange, full spending used; .e., first analysis performed interval trange final analysis. long input spending function strictly increasing, means first interim interval trange final interim analysis bound specified. sfTruncated compresses spending sub-range [0,1]. parameter param$trange specifies range spending occur. Within range, spending spent according spending function specified param$sf along corresponding spending function parameter(s) param$param. See example using sfLinear spends uniformly specified range.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfSpecial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncated, trimmed and gapped spending functions — sfTruncated","text":"","code":"sfTruncated(alpha, t, param)  sfTrimmed(alpha, t, param)  sfGapped(alpha, t, param)"},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfSpecial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truncated, trimmed and gapped spending functions — sfTruncated","text":"alpha Real value \\(> 0\\) 1. Normally, alpha=0.025 one-sided Type error specification alpha=0.1 Type II error specification. However, set 1 descriptive purposes wish see proportion spending function proportion sample size information. t vector points increasing values 0 1, inclusive. Values proportion sample size information spending function computed. param list containing elements sf (spendfn object sfHSD), trange (range spending function increases 0 1; 0 <= trange[1]<trange[2] <=1; sfGapped, trange[1] must > 0), param (null spending function parameters scalar vector parameters needed fully specify spending function sf).","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfSpecial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Truncated, trimmed and gapped spending functions — sfTruncated","text":"object type spendfn. See vignette(\"SpendingFunctionOverview\") details.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfSpecial.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Truncated, trimmed and gapped spending functions — sfTruncated","text":"gsDesign technical manual available   https://keaven.github.io/gsd-tech-manual/.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfSpecial.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Truncated, trimmed and gapped spending functions — sfTruncated","text":"Jennison C Turnbull BW (2000), Group Sequential Methods Applications Clinical Trials. Boca Raton: Chapman Hall.","code":""},{"path":[]},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfSpecial.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Truncated, trimmed and gapped spending functions — sfTruncated","text":"Keaven Anderson keaven_anderson@merck.com","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfTDist.html","id":null,"dir":"Reference","previous_headings":"","what":"t-distribution Spending Function — sfTDist","title":"t-distribution Spending Function — sfTDist","text":"function sfTDist() provides perhaps maximum flexibility among spending functions provided gsDesignCRT package. function allows fitting three points cumulative spending function curve; case, six parameters specified indicating x y coordinate 3 points. t-distribution spending function takes form $$f(t;\\alpha)=\\alpha F(+bF^{-1}(t))$$ \\(F()\\) cumulative t-distribution function df degrees freedom \\(F^{-1}()\\) inverse.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfTDist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"t-distribution Spending Function — sfTDist","text":"","code":"sfTDist(alpha, t, param)"},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfTDist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"t-distribution Spending Function — sfTDist","text":"alpha Real value \\(> 0\\) 1. Normally, alpha=0.025 one-sided Type error specification alpha=0.1 Type II error specification. However, set 1 descriptive purposes wish see proportion spending function proportion sample size/information. t vector points increasing values 0 1, inclusive. Values proportion sample size/information spending function computed. param three-parameter specification, first paramater () may real value, second (b) positive value, third parameter (df=degrees freedom) real value 1 greater. gsDesignCRT() called t-distribution spending function, parameterization printed.  five parameter specification c(t1,t2,u1,u2,df) objective resulting cumulative proportion spending t represented sf(t) satisfies sf(t1)=alpha*u1, sf(t2)=alpha*u2. t-distribution used df degrees freedom.  parameterization, first four values must 0 1 t1 < t2, u1 < u2.  final parameter real value 1 . parameterization can fit two points satisfying requirements.  six parameter specification attempts fit 3 points, flexibility fit three points.  case, specification param c(t1,t2,t3,u1,u2,u3) objective sf(t1)=alpha*u1, sf(t2)=alpha*u2, sf(t3)=alpha*u3. See examples see happens points specified fit.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfTDist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"t-distribution Spending Function — sfTDist","text":"object type spendfn. See vignette(\"SpendingFunctionOverview\") details.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfTDist.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"t-distribution Spending Function — sfTDist","text":"gsDesign technical manual available   https://keaven.github.io/gsd-tech-manual/.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfTDist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"t-distribution Spending Function — sfTDist","text":"Jennison C Turnbull BW (2000), Group Sequential Methods Applications Clinical Trials. Boca Raton: Chapman Hall.","code":""},{"path":[]},{"path":"https://leejtding.github.io/gsDesignCRT/reference/sfTDist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"t-distribution Spending Function — sfTDist","text":"Keaven Anderson keaven_anderson@merck.com","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/spendingFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"Spending Function — spendingFunction","title":"Spending Function — spendingFunction","text":"Spending Function","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/spendingFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spending Function — spendingFunction","text":"","code":"spendingFunction(alpha, t, param)"},{"path":"https://leejtding.github.io/gsDesignCRT/reference/spendingFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spending Function — spendingFunction","text":"alpha Real value \\(> 0\\) 1. Defaults calls gsDesignCRT() alpha=0.025 one-sided Type error specification alpha=0.1 Type II error specification. However, set 1 , descriptive purposes, wish see proportion spending function proportion sample size/information. t vector points increasing values 0 1, inclusive. Values proportion sample size/information spending function computed. param single real value vector real values specifying spending function parameter(s); must appropriately matched spending function specified.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/spendingFunction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spending Function — spendingFunction","text":"spendingFunction spending functions general produce object type spendfn. name character string name spending function. param parameters used spending function. parname character string strings name(s) parameter(s) param. sf spending function specified. spend vector cumulative spending values corresponding input values t. bound null returned spending function, set gsDesignCRT() spending function called .  Contains z-values bounds design. prob null returned spending function, set gsDesignCRT() spending function called .  Contains probabilities boundary crossing -th analysis j-th theta value input gsDesignCRT() prob[,j].","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/spendingFunction.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Spending Function — spendingFunction","text":"gsDesign technical manual available   https://keaven.github.io/gsd-tech-manual/.","code":""},{"path":"https://leejtding.github.io/gsDesignCRT/reference/spendingFunction.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Spending Function — spendingFunction","text":"Jennison C Turnbull BW (2000), Group Sequential Methods Applications Clinical Trials. Boca Raton: Chapman Hall.","code":""},{"path":[]},{"path":"https://leejtding.github.io/gsDesignCRT/reference/spendingFunction.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Spending Function — spendingFunction","text":"Keaven Anderson keaven_anderson@merck.com","code":""},{"path":[]}]
